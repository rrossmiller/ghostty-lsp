pub const doc_str = \\{"font-family": "The font families to use.\n\nYou can generate the list of valid values using the CLI:\n\n```\nghostty +list-fonts\n```\n\nThis configuration can be repeated multiple times to specify preferred\nfallback fonts when the requested codepoint is not available in the primary\nfont. This is particularly useful for multiple languages, symbolic fonts,\netc.\n\nNotes on emoji specifically: On macOS, Ghostty by default will always use\nApple Color Emoji and on Linux will always use Noto Emoji. You can\noverride this behavior by specifying a font family here that contains\nemoji glyphs.\n\nThe specific styles (bold, italic, bold italic) do not need to be\nexplicitly set. If a style is not set, then the regular style (font-family)\nwill be searched for stylistic variants. If a stylistic variant is not\nfound, Ghostty will use the regular style. This prevents falling back to a\ndifferent font family just to get a style such as bold. This also applies\nif you explicitly specify a font family for a style. For example, if you\nset `font-family-bold = FooBar` and \"FooBar\" cannot be found, Ghostty will\nuse whatever font is set for `font-family` for the bold style.\n\nFinally, some styles may be synthesized if they are not supported.\nFor example, if a font does not have an italic style and no alternative\nitalic font is specified, Ghostty will synthesize an italic style by\napplying a slant to the regular style. If you want to disable these\nsynthesized styles then you can use the `font-style` configurations\nas documented below.\n\nYou can disable styles completely by using the `font-style` set of\nconfigurations. See the documentation for `font-style` for more information.\n\nIf you want to overwrite a previous set value rather than append a fallback,\nspecify the value as `\"\"` (empty string) to reset the list and then set the\nnew values. For example:\n\n```\nfont-family = \"\"\nfont-family = \"My Favorite Font\"\n```\n\nSetting any of these as CLI arguments will automatically clear the\nvalues set in configuration files so you don't need to specify\n`--font-family=\"\"` before setting a new value. You only need to specify\nthis within config files if you want to clear previously set values in\nconfiguration files or on the CLI if you want to clear values set on the\nCLI.\n\nChanging this configuration at runtime will only affect new terminals, i.e.\nnew windows, tabs, etc.", "font-family-bold": "The font families to use.\n\nYou can generate the list of valid values using the CLI:\n\n```\nghostty +list-fonts\n```\n\nThis configuration can be repeated multiple times to specify preferred\nfallback fonts when the requested codepoint is not available in the primary\nfont. This is particularly useful for multiple languages, symbolic fonts,\netc.\n\nNotes on emoji specifically: On macOS, Ghostty by default will always use\nApple Color Emoji and on Linux will always use Noto Emoji. You can\noverride this behavior by specifying a font family here that contains\nemoji glyphs.\n\nThe specific styles (bold, italic, bold italic) do not need to be\nexplicitly set. If a style is not set, then the regular style (font-family)\nwill be searched for stylistic variants. If a stylistic variant is not\nfound, Ghostty will use the regular style. This prevents falling back to a\ndifferent font family just to get a style such as bold. This also applies\nif you explicitly specify a font family for a style. For example, if you\nset `font-family-bold = FooBar` and \"FooBar\" cannot be found, Ghostty will\nuse whatever font is set for `font-family` for the bold style.\n\nFinally, some styles may be synthesized if they are not supported.\nFor example, if a font does not have an italic style and no alternative\nitalic font is specified, Ghostty will synthesize an italic style by\napplying a slant to the regular style. If you want to disable these\nsynthesized styles then you can use the `font-style` configurations\nas documented below.\n\nYou can disable styles completely by using the `font-style` set of\nconfigurations. See the documentation for `font-style` for more information.\n\nIf you want to overwrite a previous set value rather than append a fallback,\nspecify the value as `\"\"` (empty string) to reset the list and then set the\nnew values. For example:\n\n```\nfont-family = \"\"\nfont-family = \"My Favorite Font\"\n```\n\nSetting any of these as CLI arguments will automatically clear the\nvalues set in configuration files so you don't need to specify\n`--font-family=\"\"` before setting a new value. You only need to specify\nthis within config files if you want to clear previously set values in\nconfiguration files or on the CLI if you want to clear values set on the\nCLI.\n\nChanging this configuration at runtime will only affect new terminals, i.e.\nnew windows, tabs, etc.", "font-family-italic": "The font families to use.\n\nYou can generate the list of valid values using the CLI:\n\n```\nghostty +list-fonts\n```\n\nThis configuration can be repeated multiple times to specify preferred\nfallback fonts when the requested codepoint is not available in the primary\nfont. This is particularly useful for multiple languages, symbolic fonts,\netc.\n\nNotes on emoji specifically: On macOS, Ghostty by default will always use\nApple Color Emoji and on Linux will always use Noto Emoji. You can\noverride this behavior by specifying a font family here that contains\nemoji glyphs.\n\nThe specific styles (bold, italic, bold italic) do not need to be\nexplicitly set. If a style is not set, then the regular style (font-family)\nwill be searched for stylistic variants. If a stylistic variant is not\nfound, Ghostty will use the regular style. This prevents falling back to a\ndifferent font family just to get a style such as bold. This also applies\nif you explicitly specify a font family for a style. For example, if you\nset `font-family-bold = FooBar` and \"FooBar\" cannot be found, Ghostty will\nuse whatever font is set for `font-family` for the bold style.\n\nFinally, some styles may be synthesized if they are not supported.\nFor example, if a font does not have an italic style and no alternative\nitalic font is specified, Ghostty will synthesize an italic style by\napplying a slant to the regular style. If you want to disable these\nsynthesized styles then you can use the `font-style` configurations\nas documented below.\n\nYou can disable styles completely by using the `font-style` set of\nconfigurations. See the documentation for `font-style` for more information.\n\nIf you want to overwrite a previous set value rather than append a fallback,\nspecify the value as `\"\"` (empty string) to reset the list and then set the\nnew values. For example:\n\n```\nfont-family = \"\"\nfont-family = \"My Favorite Font\"\n```\n\nSetting any of these as CLI arguments will automatically clear the\nvalues set in configuration files so you don't need to specify\n`--font-family=\"\"` before setting a new value. You only need to specify\nthis within config files if you want to clear previously set values in\nconfiguration files or on the CLI if you want to clear values set on the\nCLI.\n\nChanging this configuration at runtime will only affect new terminals, i.e.\nnew windows, tabs, etc.", "font-family-bold-italic": "The font families to use.\n\nYou can generate the list of valid values using the CLI:\n\n```\nghostty +list-fonts\n```\n\nThis configuration can be repeated multiple times to specify preferred\nfallback fonts when the requested codepoint is not available in the primary\nfont. This is particularly useful for multiple languages, symbolic fonts,\netc.\n\nNotes on emoji specifically: On macOS, Ghostty by default will always use\nApple Color Emoji and on Linux will always use Noto Emoji. You can\noverride this behavior by specifying a font family here that contains\nemoji glyphs.\n\nThe specific styles (bold, italic, bold italic) do not need to be\nexplicitly set. If a style is not set, then the regular style (font-family)\nwill be searched for stylistic variants. If a stylistic variant is not\nfound, Ghostty will use the regular style. This prevents falling back to a\ndifferent font family just to get a style such as bold. This also applies\nif you explicitly specify a font family for a style. For example, if you\nset `font-family-bold = FooBar` and \"FooBar\" cannot be found, Ghostty will\nuse whatever font is set for `font-family` for the bold style.\n\nFinally, some styles may be synthesized if they are not supported.\nFor example, if a font does not have an italic style and no alternative\nitalic font is specified, Ghostty will synthesize an italic style by\napplying a slant to the regular style. If you want to disable these\nsynthesized styles then you can use the `font-style` configurations\nas documented below.\n\nYou can disable styles completely by using the `font-style` set of\nconfigurations. See the documentation for `font-style` for more information.\n\nIf you want to overwrite a previous set value rather than append a fallback,\nspecify the value as `\"\"` (empty string) to reset the list and then set the\nnew values. For example:\n\n```\nfont-family = \"\"\nfont-family = \"My Favorite Font\"\n```\n\nSetting any of these as CLI arguments will automatically clear the\nvalues set in configuration files so you don't need to specify\n`--font-family=\"\"` before setting a new value. You only need to specify\nthis within config files if you want to clear previously set values in\nconfiguration files or on the CLI if you want to clear values set on the\nCLI.\n\nChanging this configuration at runtime will only affect new terminals, i.e.\nnew windows, tabs, etc.", "font-style": "The named font style to use for each of the requested terminal font styles.\nThis looks up the style based on the font style string advertised by the\nfont itself. For example, \"Iosevka Heavy\" has a style of \"Heavy\".\n\nYou can also use these fields to completely disable a font style. If you set\nthe value of the configuration below to literal `false` then that font style\nwill be disabled. If the running program in the terminal requests a disabled\nfont style, the regular font style will be used instead.\n\nThese are only valid if its corresponding font-family is also specified. If\nno font-family is specified, then the font-style is ignored unless you're\ndisabling the font style.", "font-style-bold": "The named font style to use for each of the requested terminal font styles.\nThis looks up the style based on the font style string advertised by the\nfont itself. For example, \"Iosevka Heavy\" has a style of \"Heavy\".\n\nYou can also use these fields to completely disable a font style. If you set\nthe value of the configuration below to literal `false` then that font style\nwill be disabled. If the running program in the terminal requests a disabled\nfont style, the regular font style will be used instead.\n\nThese are only valid if its corresponding font-family is also specified. If\nno font-family is specified, then the font-style is ignored unless you're\ndisabling the font style.", "font-style-italic": "The named font style to use for each of the requested terminal font styles.\nThis looks up the style based on the font style string advertised by the\nfont itself. For example, \"Iosevka Heavy\" has a style of \"Heavy\".\n\nYou can also use these fields to completely disable a font style. If you set\nthe value of the configuration below to literal `false` then that font style\nwill be disabled. If the running program in the terminal requests a disabled\nfont style, the regular font style will be used instead.\n\nThese are only valid if its corresponding font-family is also specified. If\nno font-family is specified, then the font-style is ignored unless you're\ndisabling the font style.", "font-style-bold-italic": "The named font style to use for each of the requested terminal font styles.\nThis looks up the style based on the font style string advertised by the\nfont itself. For example, \"Iosevka Heavy\" has a style of \"Heavy\".\n\nYou can also use these fields to completely disable a font style. If you set\nthe value of the configuration below to literal `false` then that font style\nwill be disabled. If the running program in the terminal requests a disabled\nfont style, the regular font style will be used instead.\n\nThese are only valid if its corresponding font-family is also specified. If\nno font-family is specified, then the font-style is ignored unless you're\ndisabling the font style.", "font-synthetic-style": "Control whether Ghostty should synthesize a style if the requested style is\nnot available in the specified font-family.\n\nGhostty can synthesize bold, italic, and bold italic styles if the font\ndoes not have a specific style. For bold, this is done by drawing an\noutline around the glyph of varying thickness. For italic, this is done by\napplying a slant to the glyph. For bold italic, both of these are applied.\n\nSynthetic styles are not perfect and will generally not look as good\nas a font that has the style natively. However, they are useful to\nprovide styled text when the font does not have the style.\n\nSet this to \"false\" or \"true\" to disable or enable synthetic styles\ncompletely. You can disable specific styles using \"no-bold\", \"no-italic\",\nand \"no-bold-italic\". You can disable multiple styles by separating them\nwith a comma. For example, \"no-bold,no-italic\".\n\nAvailable style keys are: `bold`, `italic`, `bold-italic`.\n\nIf synthetic styles are disabled, then the regular style will be used\ninstead if the requested style is not available. If the font has the\nrequested style, then the font will be used as-is since the style is\nnot synthetic.\n\n<Warning>\n An easy mistake is to disable `bold` or `italic` but not\n`bold-italic`. Disabling only `bold` or `italic` will NOT disable either\nin the `bold-italic` style. If you want to disable `bold-italic`, you must\nexplicitly disable it. You cannot partially disable `bold-italic`.\n</Warning>\n\nBy default, synthetic styles are enabled.", "font-feature": "Apply a font feature. This can be repeated multiple times to enable multiple\nfont features. You can NOT set multiple font features with a single value\n(yet).\n\nThe font feature will apply to all fonts rendered by Ghostty. A future\nenhancement will allow targeting specific faces.\n\nA valid value is the name of a feature. Prefix the feature with a `-` to\nexplicitly disable it. Example: `ss20` or `-ss20`.\n\nTo disable programming ligatures, use `-calt` since this is the typical\nfeature name for programming ligatures. To look into what font features\nyour font has and what they do, use a font inspection tool such as\n[fontdrop.info](https://fontdrop.info).\n\nTo generally disable most ligatures, use `-calt`, `-liga`, and `-dlig` (as\nseparate repetitive entries in your config).", "font-size": "Font size in points. This value can be a non-integer and the nearest integer\npixel size will be selected. If you have a high dpi display where 1pt = 2px\nthen you can get an odd numbered pixel size by specifying a half point.\n\nFor example, 13.5pt @ 2px/pt = 27px\n\nChanging this configuration at runtime will only affect new terminals,\ni.e. new windows, tabs, etc. Note that you may still not see the change\ndepending on your `window-inherit-font-size` setting. If that setting is\ntrue, only the first window will be affected by this change since all\nsubsequent windows will inherit the font size of the previous window.\n\nOn Linux with GTK, font size is scaled according to both display-wide and\ntext-specific scaling factors, which are often managed by your desktop\nenvironment (e.g. the GNOME display scale and large text settings).", "font-variation": "A repeatable configuration to set one or more font variations values for\na variable font. A variable font is a single font, usually with a filename\nending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes\nfor things such as weight, slant, etc. Not all fonts support variations;\nonly fonts that explicitly state they are variable fonts will work.\n\nThe format of this is `id=value` where `id` is the axis identifier. An axis\nidentifier is always a 4 character string, such as `wght`. To get the list\nof supported axes, look at your font documentation or use a font inspection\ntool.\n\nInvalid ids and values are usually ignored. For example, if a font only\nsupports weights from 100 to 700, setting `wght=800` will do nothing (it\nwill not be clamped to 700). You must consult your font's documentation to\nsee what values are supported.\n\nCommon axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`\n(optical size), `wdth` (width), `GRAD` (gradient), etc.", "font-variation-bold": "A repeatable configuration to set one or more font variations values for\na variable font. A variable font is a single font, usually with a filename\nending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes\nfor things such as weight, slant, etc. Not all fonts support variations;\nonly fonts that explicitly state they are variable fonts will work.\n\nThe format of this is `id=value` where `id` is the axis identifier. An axis\nidentifier is always a 4 character string, such as `wght`. To get the list\nof supported axes, look at your font documentation or use a font inspection\ntool.\n\nInvalid ids and values are usually ignored. For example, if a font only\nsupports weights from 100 to 700, setting `wght=800` will do nothing (it\nwill not be clamped to 700). You must consult your font's documentation to\nsee what values are supported.\n\nCommon axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`\n(optical size), `wdth` (width), `GRAD` (gradient), etc.", "font-variation-italic": "A repeatable configuration to set one or more font variations values for\na variable font. A variable font is a single font, usually with a filename\nending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes\nfor things such as weight, slant, etc. Not all fonts support variations;\nonly fonts that explicitly state they are variable fonts will work.\n\nThe format of this is `id=value` where `id` is the axis identifier. An axis\nidentifier is always a 4 character string, such as `wght`. To get the list\nof supported axes, look at your font documentation or use a font inspection\ntool.\n\nInvalid ids and values are usually ignored. For example, if a font only\nsupports weights from 100 to 700, setting `wght=800` will do nothing (it\nwill not be clamped to 700). You must consult your font's documentation to\nsee what values are supported.\n\nCommon axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`\n(optical size), `wdth` (width), `GRAD` (gradient), etc.", "font-variation-bold-italic": "A repeatable configuration to set one or more font variations values for\na variable font. A variable font is a single font, usually with a filename\nending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes\nfor things such as weight, slant, etc. Not all fonts support variations;\nonly fonts that explicitly state they are variable fonts will work.\n\nThe format of this is `id=value` where `id` is the axis identifier. An axis\nidentifier is always a 4 character string, such as `wght`. To get the list\nof supported axes, look at your font documentation or use a font inspection\ntool.\n\nInvalid ids and values are usually ignored. For example, if a font only\nsupports weights from 100 to 700, setting `wght=800` will do nothing (it\nwill not be clamped to 700). You must consult your font's documentation to\nsee what values are supported.\n\nCommon axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`\n(optical size), `wdth` (width), `GRAD` (gradient), etc.", "font-codepoint-map": "Force one or a range of Unicode codepoints to map to a specific named font.\nThis is useful if you want to support special symbols or if you want to use\nspecific glyphs that render better for your specific font.\n\nThe syntax is `codepoint=fontname` where `codepoint` is either a single\ncodepoint or a range. Codepoints must be specified as full Unicode\nhex values, such as `U+ABCD`. Codepoints ranges are specified as\n`U+ABCD-U+DEFG`. You can specify multiple ranges for the same font separated\nby commas, such as `U+ABCD-U+DEFG,U+1234-U+5678=fontname`. The font name is\nthe same value as you would use for `font-family`.\n\nThis configuration can be repeated multiple times to specify multiple\ncodepoint mappings.\n\nChanging this configuration at runtime will only affect new terminals,\ni.e. new windows, tabs, etc.", "font-thicken": "Draw fonts with a thicker stroke, if supported. This is only supported\ncurrently on macOS.", "adjust-cell-width": "All of the configurations behavior adjust various metrics determined by the\nfont. The values can be integers (1, -1, etc.) or a percentage (20%, -15%,\netc.). In each case, the values represent the amount to change the original\nvalue.\n\nFor example, a value of `1` increases the value by 1; it does not set it to\nliterally 1. A value of `20%` increases the value by 20%. And so on.\n\nThere is little to no validation on these values so the wrong values (i.e.\n`-100%`) can cause the terminal to be unusable. Use with caution and reason.\n\nSome values are clamped to minimum or maximum values. This can make it\nappear that certain values are ignored. For example, many `*-thickness`\nadjustments cannot go below 1px.\n\n`adjust-cell-height` has some additional behaviors to describe:\n\n  * The font will be centered vertically in the cell.\n\n  * The cursor will remain the same size as the font, but may be\n    adjusted separately with `adjust-cursor-height`.\n\n  * Powerline glyphs will be adjusted along with the cell height so\n    that things like status lines continue to look aligned.", "adjust-cell-height": "All of the configurations behavior adjust various metrics determined by the\nfont. The values can be integers (1, -1, etc.) or a percentage (20%, -15%,\netc.). In each case, the values represent the amount to change the original\nvalue.\n\nFor example, a value of `1` increases the value by 1; it does not set it to\nliterally 1. A value of `20%` increases the value by 20%. And so on.\n\nThere is little to no validation on these values so the wrong values (i.e.\n`-100%`) can cause the terminal to be unusable. Use with caution and reason.\n\nSome values are clamped to minimum or maximum values. This can make it\nappear that certain values are ignored. For example, many `*-thickness`\nadjustments cannot go below 1px.\n\n`adjust-cell-height` has some additional behaviors to describe:\n\n  * The font will be centered vertically in the cell.\n\n  * The cursor will remain the same size as the font, but may be\n    adjusted separately with `adjust-cursor-height`.\n\n  * Powerline glyphs will be adjusted along with the cell height so\n    that things like status lines continue to look aligned.", "adjust-font-baseline": "Distance in pixels or percentage adjustment from the bottom of the cell to the text baseline.\nIncrease to move baseline UP, decrease to move baseline DOWN.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-underline-position": "Distance in pixels or percentage adjustment from the top of the cell to the top of the underline.\nIncrease to move underline DOWN, decrease to move underline UP.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-underline-thickness": "Thickness in pixels of the underline.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-strikethrough-position": "Distance in pixels or percentage adjustment from the top of the cell to the top of the strikethrough.\nIncrease to move strikethrough DOWN, decrease to move underline UP.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-strikethrough-thickness": "Thickness in pixels or percentage adjustment of the strikethrough.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-overline-position": "Distance in pixels or percentage adjustment from the top of the cell to the top of the overline.\nIncrease to move overline DOWN, decrease to move underline UP.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-overline-thickness": "Thickness in pixels or percentage adjustment of the overline.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-cursor-thickness": "Thickness in pixels or percentage adjustment of the bar cursor and outlined rect cursor.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-cursor-height": "Height in pixels or percentage adjustment of the cursor. Currently applies to all cursor types:\nbar, rect, and outlined rect.\nSee the notes about adjustments in `adjust-cell-width`.", "adjust-box-thickness": "Thickness in pixels or percentage adjustment of box drawing characters.\nSee the notes about adjustments in `adjust-cell-width`.", "grapheme-width-method": "The method to use for calculating the cell width of a grapheme cluster.\nThe default value is `unicode` which uses the Unicode standard to determine\ngrapheme width. This results in correct grapheme width but may result in\ncursor-desync issues with some programs (such as shells) that may use a\nlegacy method such as `wcswidth`.\n\nValid values are:\n\n* `legacy` - Use a legacy method to determine grapheme width, such as\n  wcswidth This maximizes compatibility with legacy programs but may result\n  in incorrect grapheme width for certain graphemes such as skin-tone\n  emoji, non-English characters, etc.\n\n  This is called \"legacy\" and not something more specific because the\n  behavior is undefined and we want to retain the ability to modify it.\n  For example, we may or may not use libc `wcswidth` now or in the future.\n\n* `unicode` - Use the Unicode standard to determine grapheme width.\n\nIf a running program explicitly enables terminal mode 2027, then `unicode`\nwidth will be forced regardless of this configuration. When mode 2027 is\nreset, this configuration will be used again.\n\nThis configuration can be changed at runtime but will not affect existing\nterminals. Only new terminals will use the new configuration.", "freetype-load-flags": "FreeType load flags to enable. The format of this is a list of flags to\nenable separated by commas. If you prefix a flag with `no-` then it is\ndisabled. If you omit a flag, its default value is used, so you must\nexplicitly disable flags you don't want. You can also use `true` or `false`\nto turn all flags on or off.\n\nThis configuration only applies to Ghostty builds that use FreeType.\nThis is usually the case only for Linux builds. macOS uses CoreText\nand does not have an equivalent configuration.\n\nAvailable flags:\n\n  * `hinting` - Enable or disable hinting, enabled by default.\n  * `force-autohint` - Use the freetype auto-hinter rather than the\n    font's native hinter. Enabled by default.\n  * `monochrome` - Instructs renderer to use 1-bit monochrome\n    rendering. This option doesn't impact the hinter.\n    Enabled by default.\n  * `autohint` - Use the freetype auto-hinter. Enabled by default.\n\nExample: `hinting`, `no-hinting`, `force-autohint`, `no-force-autohint`", "theme": "A theme to use. This can be a built-in theme name, a custom theme\nname, or an absolute path to a custom theme file. Ghostty also supports\nspecifying a different theme to use for light and dark mode. Each\noption is documented below.\n\nIf the theme is an absolute pathname, Ghostty will attempt to load that\nfile as a theme. If that file does not exist or is inaccessible, an error\nwill be logged and no other directories will be searched.\n\nIf the theme is not an absolute pathname, two different directories will be\nsearched for a file name that matches the theme. This is case sensitive on\nsystems with case-sensitive filesystems. It is an error for a theme name to\ninclude path separators unless it is an absolute pathname.\n\nThe first directory is the `themes` subdirectory of your Ghostty\nconfiguration directory. This is `$XDG_CONFIG_DIR/ghostty/themes` or\n`~/.config/ghostty/themes`.\n\nThe second directory is the `themes` subdirectory of the Ghostty resources\ndirectory. Ghostty ships with a multitude of themes that will be installed\ninto this directory. On macOS, this list is in the\n`Ghostty.app/Contents/Resources/ghostty/themes` directory. On Linux, this\nlist is in the `share/ghostty/themes` directory (wherever you installed the\nGhostty \"share\" directory.\n\nTo see a list of available themes, run `ghostty +list-themes`.\n\nA theme file is simply another Ghostty configuration file. They share\nthe same syntax and same configuration options. A theme can set any valid\nconfiguration option so please do not use a theme file from an untrusted\nsource. The built-in themes are audited to only set safe configuration\noptions.\n\nSome options cannot be set within theme files. The reason these are not\nsupported should be self-evident. A theme file cannot set `theme` or\n`config-file`. At the time of writing this, Ghostty will not show any\nwarnings or errors if you set these options in a theme file but they will\nbe silently ignored.\n\nAny additional colors specified via background, foreground, palette, etc.\nwill override the colors specified in the theme.\n\nTo specify a different theme for light and dark mode, use the following\nsyntax: `light:theme-name,dark:theme-name`. For example:\n`light:rose-pine-dawn,dark:rose-pine`. Whitespace around all values are\ntrimmed and order of light and dark does not matter. Both light and dark\nmust be specified in this form. In this form, the theme used will be\nbased on the current desktop environment theme.\n\nThere are some known bugs with light/dark mode theming. These will\nbe fixed in a future update:\n\n  - macOS: titlebar tabs style is not updated when switching themes.", "background": "Background color for the window.", "foreground": "Foreground color for the window.", "selection-foreground": "The foreground and background color for selection. If this is not set, then\nthe selection color is just the inverted window background and foreground\n(note: not to be confused with the cell bg/fg).", "selection-background": "The foreground and background color for selection. If this is not set, then\nthe selection color is just the inverted window background and foreground\n(note: not to be confused with the cell bg/fg).", "selection-invert-fg-bg": "Swap the foreground and background colors of cells for selection. This\noption overrides the `selection-foreground` and `selection-background`\noptions.\n\nIf you select across cells with differing foregrounds and backgrounds, the\nselection color will vary across the selection.", "minimum-contrast": "The minimum contrast ratio between the foreground and background colors.\nThe contrast ratio is a value between 1 and 21. A value of 1 allows for no\ncontrast (i.e. black on black). This value is the contrast ratio as defined\nby the [WCAG 2.0 specification](https://www.w3.org/TR/WCAG20/).\n\nIf you want to avoid invisible text (same color as background), a value of\n1.1 is a good value. If you want to avoid text that is difficult to read, a\nvalue of 3 or higher is a good value. The higher the value, the more likely\nthat text will become black or white.\n\nThis value does not apply to Emoji or images.", "palette": "Color palette for the 256 color form that many terminal applications use.\nThe syntax of this configuration is `N=HEXCODE` where `N` is 0 to 255 (for\nthe 256 colors in the terminal color table) and `HEXCODE` is a typical RGB\ncolor code such as `#AABBCC`.\n\nFor definitions on all the codes [see this cheat\nsheet](https://www.ditig.com/256-colors-cheat-sheet).", "cursor-color": "The color of the cursor. If this is not set, a default will be chosen.", "cursor-invert-fg-bg": "Swap the foreground and background colors of the cell under the cursor. This\noption overrides the `cursor-color` and `cursor-text` options.", "cursor-opacity": "The opacity level (opposite of transparency) of the cursor. A value of 1\nis fully opaque and a value of 0 is fully transparent. A value less than 0\nor greater than 1 will be clamped to the nearest valid value. Note that a\nsufficiently small value such as 0.3 may be effectively invisible and may\nmake it difficult to find the cursor.", "cursor-style": "The style of the cursor. This sets the default style. A running program can\nstill request an explicit cursor style using escape sequences (such as `CSI\nq`). Shell configurations will often request specific cursor styles.\n\nNote that shell integration will automatically set the cursor to a bar at\na prompt, regardless of this configuration. You can disable that behavior\nby specifying `shell-integration-features = no-cursor` or disabling shell\nintegration entirely.\n\nValid values are:\n\n  * `block`\n  * `bar`\n  * `underline`\n  * `block_hollow`", "cursor-style-blink": "Sets the default blinking state of the cursor. This is just the default\nstate; running programs may override the cursor style using `DECSCUSR` (`CSI\nq`).\n\nIf this is not set, the cursor blinks by default. Note that this is not the\nsame as a \"true\" value, as noted below.\n\nIf this is not set at all (`null`), then Ghostty will respect DEC Mode 12\n(AT&T cursor blink) as an alternate approach to turning blinking on/off. If\nthis is set to any value other than null, DEC mode 12 will be ignored but\n`DECSCUSR` will still be respected.\n\nValid values are:\n\n  * ` ` (blank)\n  * `true`\n  * `false`", "cursor-text": "The color of the text under the cursor. If this is not set, a default will\nbe chosen.", "cursor-click-to-move": "Enables the ability to move the cursor at prompts by using `alt+click` on\nLinux and `option+click` on macOS.\n\nThis feature requires shell integration (specifically prompt marking\nvia `OSC 133`) and only works in primary screen mode. Alternate screen\napplications like vim usually have their own version of this feature but\nthis configuration doesn't control that.\n\nIt should be noted that this feature works by translating your desired\nposition into a series of synthetic arrow key movements, so some weird\nbehavior around edge cases are to be expected. This is unfortunately how\nthis feature is implemented across terminals because there isn't any other\nway to implement it.", "mouse-hide-while-typing": "Hide the mouse immediately when typing. The mouse becomes visible again\nwhen the mouse is used (button, movement, etc.). Platform-specific behavior\nmay dictate other scenarios where the mouse is shown. For example on macOS,\nthe mouse is shown again when a new window, tab, or split is created.", "mouse-shift-capture": "Determines whether running programs can detect the shift key pressed with a\nmouse click. Typically, the shift key is used to extend mouse selection.\n\nThe default value of `false` means that the shift key is not sent with\nthe mouse protocol and will extend the selection. This value can be\nconditionally overridden by the running program with the `XTSHIFTESCAPE`\nsequence.\n\nThe value `true` means that the shift key is sent with the mouse protocol\nbut the running program can override this behavior with `XTSHIFTESCAPE`.\n\nThe value `never` is the same as `false` but the running program cannot\noverride this behavior with `XTSHIFTESCAPE`. The value `always` is the\nsame as `true` but the running program cannot override this behavior with\n`XTSHIFTESCAPE`.\n\nIf you always want shift to extend mouse selection even if the program\nrequests otherwise, set this to `never`.\n\nValid values are:\n\n  * `true`\n  * `false`\n  * `always`\n  * `never`", "mouse-scroll-multiplier": "Multiplier for scrolling distance with the mouse wheel. Any value less\nthan 0.01 or greater than 10,000 will be clamped to the nearest valid\nvalue.\n\nA value of \"1\" (default) scrolls te default amount. A value of \"2\" scrolls\ndouble the default amount. A value of \"0.5\" scrolls half the default amount.\nEt cetera.", "background-opacity": "The opacity level (opposite of transparency) of the background. A value of\n1 is fully opaque and a value of 0 is fully transparent. A value less than 0\nor greater than 1 will be clamped to the nearest valid value.\n\nOn macOS, background opacity is disabled when the terminal enters native\nfullscreen. This is because the background becomes gray and it can cause\nwidgets to show through which isn't generally desirable.", "background-blur-radius": "A positive value enables blurring of the background when background-opacity\nis less than 1. The value is the blur radius to apply. A value of 20\nis reasonable for a good looking blur. Higher values will cause strange\nrendering issues as well as performance issues.\n\nThis is only supported on macOS.", "unfocused-split-opacity": "The opacity level (opposite of transparency) of an unfocused split.\nUnfocused splits by default are slightly faded out to make it easier to see\nwhich split is focused. To disable this feature, set this value to 1.\n\nA value of 1 is fully opaque and a value of 0 is fully transparent. Because\n\"0\" is not useful (it makes the window look very weird), the minimum value\nis 0.15. This value still looks weird but you can at least see what's going\non. A value outside of the range 0.15 to 1 will be clamped to the nearest\nvalid value.", "unfocused-split-fill": "The color to dim the unfocused split. Unfocused splits are dimmed by\nrendering a semi-transparent rectangle over the split. This sets the color of\nthat rectangle and can be used to carefully control the dimming effect.\n\nThis will default to the background color.", "command": "The command to run, usually a shell. If this is not an absolute path, it'll\nbe looked up in the `PATH`. If this is not set, a default will be looked up\nfrom your system. The rules for the default lookup are:\n\n  * `SHELL` environment variable\n\n  * `passwd` entry (user information)\n\nThis can contain additional arguments to run the command with. If additional\narguments are provided, the command will be executed using `/bin/sh -c`.\nGhostty does not do any shell command parsing.\n\nThis command will be used for all new terminal surfaces, i.e. new windows,\ntabs, etc. If you want to run a command only for the first terminal surface\ncreated when Ghostty starts, use the `initial-command` configuration.\n\nGhostty supports the common `-e` flag for executing a command with\narguments. For example, `ghostty -e fish --with --custom --args`.\nThis flag sets the `initial-command` configuration, see that for more\ninformation.", "initial-command": "This is the same as \"command\", but only applies to the first terminal\nsurface created when Ghostty starts. Subsequent terminal surfaces will use\nthe `command` configuration.\n\nAfter the first terminal surface is created (or closed), there is no\nway to run this initial command again automatically. As such, setting\nthis at runtime works but will only affect the next terminal surface\nif it is the first one ever created.\n\nIf you're using the `ghostty` CLI there is also a shortcut to set this\nwith arguments directly: you can use the `-e` flag. For example: `ghostty -e\nfish --with --custom --args`. The `-e` flag automatically forces some\nother behaviors as well:\n\n  * `gtk-single-instance=false` - This ensures that a new instance is\n    launched and the CLI args are respected.\n\n  * `quit-after-last-window-closed=true` - This ensures that the Ghostty\n    process will exit when the command exits. Additionally, the\n    `quit-after-last-window-closed-delay` is unset.\n\n  * `shell-integration=detect` (if not `none`) - This prevents forcibly\n    injecting any configured shell integration into the command's\n    environment. With `-e` its highly unlikely that you're executing a\n    shell and forced shell integration is likely to cause problems\n    (i.e. by wrapping your command in a shell, setting env vars, etc.).\n    This is a safety measure to prevent unexpected behavior. If you want\n    shell integration with a `-e`-executed command, you must either\n    name your binary appropriately or source the shell integration script\n    manually.", "wait-after-command": "If true, keep the terminal open after the command exits. Normally, the\nterminal window closes when the running command (such as a shell) exits.\nWith this true, the terminal window will stay open until any keypress is\nreceived.\n\nThis is primarily useful for scripts or debugging.", "abnormal-command-exit-runtime": "The number of milliseconds of runtime below which we consider a process exit\nto be abnormal. This is used to show an error message when the process exits\ntoo quickly.\n\nOn Linux, this must be paired with a non-zero exit code. On macOS, we allow\nany exit code because of the way shell processes are launched via the login\ncommand.", "scrollback-limit": "The size of the scrollback buffer in bytes. This also includes the active\nscreen. No matter what this is set to, enough memory will always be\nallocated for the visible screen and anything leftover is the limit for\nthe scrollback.\n\nWhen this limit is reached, the oldest lines are removed from the\nscrollback.\n\nScrollback currently exists completely in memory. This means that the\nlarger this value, the larger potential memory usage. Scrollback is\nallocated lazily up to this limit, so if you set this to a very large\nvalue, it will not immediately consume a lot of memory.\n\nThis size is per terminal surface, not for the entire application.\n\nIt is not currently possible to set an unlimited scrollback buffer.\nThis is a future planned feature.\n\nThis can be changed at runtime but will only affect new terminal surfaces.", "link": "Match a regular expression against the terminal text and associate clicking\nit with an action. This can be used to match URLs, file paths, etc. Actions\ncan be opening using the system opener (i.e. `open` or `xdg-open`) or\nexecuting any arbitrary binding action.\n\nLinks that are configured earlier take precedence over links that are\nconfigured later.\n\nA default link that matches a URL and opens it in the system opener always\nexists. This can be disabled using `link-url`.\n\nTODO: This can't currently be set!", "link-url": "Enable URL matching. URLs are matched on hover with control (Linux) or\nsuper (macOS) pressed and open using the default system application for\nthe linked URL.\n\nThe URL matcher is always lowest priority of any configured links (see\n`link`). If you want to customize URL matching, use `link` and disable this.", "fullscreen": "Start new windows in fullscreen. This setting applies to new windows and\ndoes not apply to tabs, splits, etc. However, this setting will apply to all\nnew windows, not just the first one.\n\nOn macOS, this setting does not work if window-decoration is set to\n\"false\", because native fullscreen on macOS requires window decorations\nto be set.", "title": "The title Ghostty will use for the window. This will force the title of the\nwindow to be this title at all times and Ghostty will ignore any set title\nescape sequences programs (such as Neovim) may send.\n\nIf you want a blank title, set this to one or more spaces by quoting\nthe value. For example, `title = \" \"`. This effectively hides the title.\nThis is necessary because setting a blank value resets the title to the\ndefault value of the running program.\n\nThis configuration can be reloaded at runtime. If it is set, the title\nwill update for all windows. If it is unset, the next title change escape\nsequence will be honored but previous changes will not retroactively\nbe set. This latter case may require you restart programs such as neovim\nto get the new title.", "class": "The setting that will change the application class value.\n\nThis controls the class field of the `WM_CLASS` X11 property (when running\nunder X11), and the Wayland application ID (when running under Wayland).\n\nNote that changing this value between invocations will create new, separate\ninstances, of Ghostty when running with `gtk-single-instance=true`. See that\noption for more details.\n\nThe class name must follow the requirements defined [in the GTK\ndocumentation](https://docs.gtk.org/gio/type_func.Application.id_is_valid.html).\n\nThe default is `com.mitchellh.ghostty`.\n\nThis only affects GTK builds.", "x11-instance-name": "This controls the instance name field of the `WM_CLASS` X11 property when\nrunning under X11. It has no effect otherwise.\n\nThe default is `ghostty`.\n\nThis only affects GTK builds.", "working-directory": "The directory to change to after starting the command.\n\nThis setting is secondary to the `window-inherit-working-directory`\nsetting. If a previous Ghostty terminal exists in the same process,\n`window-inherit-working-directory` will take precedence. Otherwise, this\nsetting will be used. Typically, this setting is used only for the first\nwindow.\n\nThe default is `inherit` except in special scenarios listed next. On macOS,\nif Ghostty can detect it is launched from launchd (double-clicked) or\n`open`, then it defaults to `home`. On Linux with GTK, if Ghostty can detect\nit was launched from a desktop launcher, then it defaults to `home`.\n\nThe value of this must be an absolute value or one of the special values\nbelow:\n\n  * `home` - The home directory of the executing user.\n\n  * `inherit` - The working directory of the launching process.", "keybind": "Key bindings. The format is `trigger=action`. Duplicate triggers will\noverwrite previously set values. The list of actions is available in\nthe documentation or using the `ghostty +list-actions` command.\n\nTrigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,\n`ctrl+shift+b`, `up`.\n\nValid keys are currently only listed in the\n[Ghostty source code](https://github.com/ghostty-org/ghostty/blob/d6e76858164d52cff460fedc61ddf2e560912d71/src/input/key.zig#L255).\nThis is a documentation limitation and we will improve this in the future.\nA common gotcha is that numeric keys are written as words: i.e. `one`,\n`two`, `three`, etc. and not `1`, `2`, `3`. This will also be improved in\nthe future.\n\nValid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,\n`option`), and `super` (alias: `cmd`, `command`). You may use the modifier\nor the alias. When debugging keybinds, the non-aliased modifier will always\nbe used in output.\n\n<Note>\n The fn or \"globe\" key on keyboards are not supported as a\nmodifier. This is a limitation of the operating systems and GUI toolkits\nthat Ghostty uses.\n</Note>\n\nSome additional notes for triggers:\n\n  * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.\n\n  * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,\n    but valid.\n\n  * only a single key input is allowed, `ctrl+a+b` is invalid.\n\n  * the key input can be prefixed with `physical:` to specify a\n    physical key mapping rather than a logical one. A physical key\n    mapping responds to the hardware keycode and not the keycode\n    translated by any system keyboard layouts. Example: \"ctrl+physical:a\"\n\nYou may also specify multiple triggers separated by `>` to require a\nsequence of triggers to activate the action. For example,\n`ctrl+a>n=new_window` will only trigger the `new_window` action if the\nuser presses `ctrl+a` followed separately by `n`. In other software, this\nis sometimes called a leader key, a key chord, a key table, etc. There\nis no hardcoded limit on the number of parts in a sequence.\n\n<Warning>\n If you define a sequence as a CLI argument to `ghostty`,\nyou probably have to quote the keybind since `>` is a special character\nin most shells. Example: ghostty --keybind='ctrl+a>n=new_window'\n</Warning>\n\nA trigger sequence has some special handling:\n\n  * Ghostty will wait an indefinite amount of time for the next key in\n    the sequence. There is no way to specify a timeout. The only way to\n    force the output of a prefix key is to assign another keybind to\n    specifically output that key (i.e. `ctrl+a>ctrl+a=text:foo`) or\n    press an unbound key which will send both keys to the program.\n\n  * If a prefix in a sequence is previously bound, the sequence will\n    override the previous binding. For example, if `ctrl+a` is bound to\n    `new_window` and `ctrl+a>n` is bound to `new_tab`, pressing `ctrl+a`\n    will do nothing.\n\n  * Adding to the above, if a previously bound sequence prefix is\n    used in a new, non-sequence binding, the entire previously bound\n    sequence will be unbound. For example, if you bind `ctrl+a>n` and\n    `ctrl+a>t`, and then bind `ctrl+a` directly, both `ctrl+a>n` and\n    `ctrl+a>t` will become unbound.\n\n  * Trigger sequences are not allowed for `global:` or `all:`-prefixed\n    triggers. This is a limitation we could remove in the future.\n\nAction is the action to take when the trigger is satisfied. It takes the\nformat `action` or `action:param`. The latter form is only valid if the\naction requires a parameter.\n\n  * `ignore` - Do nothing, ignore the key input. This can be used to\n    black hole certain inputs to have no effect.\n\n  * `unbind` - Remove the binding. This makes it so the previous action\n    is removed, and the key will be sent through to the child command\n    if it is printable.\n\n  * `csi:text` - Send a CSI sequence. i.e. `csi:A` sends \"cursor up\".\n\n  * `esc:text` - Send an escape sequence. i.e. `esc:d` deletes to the\n    end of the word to the right.\n\n  * `text:text` - Send a string. Uses Zig string literal syntax.\n    i.e. `text:\\x15` sends Ctrl-U.\n\n  * All other actions can be found in the documentation or by using the\n    `ghostty +list-actions` command.\n\nSome notes for the action:\n\n  * The parameter is taken as-is after the `:`. Double quotes or\n    other mechanisms are included and NOT parsed. If you want to\n    send a string value that includes spaces, wrap the entire\n    trigger/action in double quotes. Example: `--keybind=\"up=csi:A B\"`\n\nThere are some additional special values that can be specified for\nkeybind:\n\n  * `keybind=clear` will clear all set keybindings. Warning: this\n    removes ALL keybindings up to this point, including the default\n    keybindings.\n\nThe keybind trigger can be prefixed with some special values to change\nthe behavior of the keybind. These are:\n\n  * `all:` - Make the keybind apply to all terminal surfaces. By default,\n    keybinds only apply to the focused terminal surface. If this is true,\n    then the keybind will be sent to all terminal surfaces. This only\n    applies to actions that are surface-specific. For actions that\n    are already global (i.e. `quit`), this prefix has no effect.\n\n  * `global:` - Make the keybind global. By default, keybinds only work\n    within Ghostty and under the right conditions (application focused,\n    sometimes terminal focused, etc.). If you want a keybind to work\n    globally across your system (i.e. even when Ghostty is not focused),\n    specify this prefix. This prefix implies `all:`. Note: this does not\n    work in all environments; see the additional notes below for more\n    information.\n\n  * `unconsumed:` - Do not consume the input. By default, a keybind\n    will consume the input, meaning that the associated encoding (if\n    any) will not be sent to the running program in the terminal. If\n    you wish to send the encoded value to the program, specify the\n    `unconsumed:` prefix before the entire keybind. For example:\n    `unconsumed:ctrl+a=reload_config`. `global:` and `all:`-prefixed\n    keybinds will always consume the input regardless of this setting.\n    Since they are not associated with a specific terminal surface,\n    they're never encoded.\n\nKeybind triggers are not unique per prefix combination. For example,\n`ctrl+a` and `global:ctrl+a` are not two separate keybinds. The keybind\nset later will overwrite the keybind set earlier. In this case, the\n`global:` keybind will be used.\n\nMultiple prefixes can be specified. For example,\n`global:unconsumed:ctrl+a=reload_config` will make the keybind global\nand not consume the input to reload the config.\n\n<Note>\n `global:` is only supported on macOS. On macOS,\nthis feature requires accessibility permissions to be granted to Ghostty.\nWhen a `global:` keybind is specified and Ghostty is launched or reloaded,\nGhostty will attempt to request these permissions. If the permissions are\nnot granted, the keybind will not work. On macOS, you can find these\npermissions in System Preferences -> Privacy & Security -> Accessibility.\n</Note>", "window-padding-x": "Horizontal window padding. This applies padding between the terminal cells\nand the left and right window borders. The value is in points, meaning that\nit will be scaled appropriately for screen DPI.\n\nIf this value is set too large, the screen will render nothing, because the\ngrid will be completely squished by the padding. It is up to you as the user\nto pick a reasonable value. If you pick an unreasonable value, a warning\nwill appear in the logs.\n\nChanging this configuration at runtime will only affect new terminals, i.e.\nnew windows, tabs, etc.\n\nTo set a different left and right padding, specify two numerical values\nseparated by a comma. For example, `window-padding-x = 2,4` will set the\nleft padding to 2 and the right padding to 4. If you want to set both\npaddings to the same value, you can use a single value. For example,\n`window-padding-x = 2` will set both paddings to 2.", "window-padding-y": "Vertical window padding. This applies padding between the terminal cells and\nthe top and bottom window borders. The value is in points, meaning that it\nwill be scaled appropriately for screen DPI.\n\nIf this value is set too large, the screen will render nothing, because the\ngrid will be completely squished by the padding. It is up to you as the user\nto pick a reasonable value. If you pick an unreasonable value, a warning\nwill appear in the logs.\n\nChanging this configuration at runtime will only affect new terminals,\ni.e. new windows, tabs, etc.\n\nTo set a different top and bottom padding, specify two numerical values\nseparated by a comma. For example, `window-padding-y = 2,4` will set the\ntop padding to 2 and the bottom padding to 4. If you want to set both\npaddings to the same value, you can use a single value. For example,\n`window-padding-y = 2` will set both paddings to 2.", "window-padding-balance": "The viewport dimensions are usually not perfectly divisible by the cell\nsize. In this case, some extra padding on the end of a column and the bottom\nof the final row may exist. If this is `true`, then this extra padding\nis automatically balanced between all four edges to minimize imbalance on\none side. If this is `false`, the top left grid cell will always hug the\nedge with zero padding other than what may be specified with the other\n`window-padding` options.\n\nIf other `window-padding` fields are set and this is `true`, this will still\napply. The other padding is applied first and may affect how many grid cells\nactually exist, and this is applied last in order to balance the padding\ngiven a certain viewport size and grid cell size.", "window-padding-color": "The color of the padding area of the window. Valid values are:\n\n* `background` - The background color specified in `background`.\n* `extend` - Extend the background color of the nearest grid cell.\n* `extend-always` - Same as \"extend\" but always extends without applying\n  any of the heuristics that disable extending noted below.\n\nThe \"extend\" value will be disabled in certain scenarios. On primary\nscreen applications (i.e. not something like Neovim), the color will not\nbe extended vertically if any of the following are true:\n\n* The nearest row has any cells that have the default background color.\n  The thinking is that in this case, the default background color looks\n  fine as a padding color.\n* The nearest row is a prompt row (requires shell integration). The\n  thinking here is that prompts often contain powerline glyphs that\n  do not look good extended.\n* The nearest row contains a perfect fit powerline character. These\n  don't look good extended.", "window-vsync": "Synchronize rendering with the screen refresh rate. If true, this will\nminimize tearing and align redraws with the screen but may cause input\nlatency. If false, this will maximize redraw frequency but may cause tearing,\nand under heavy load may use more CPU and power.\n\nThis defaults to true because out-of-sync rendering on macOS can\ncause kernel panics (macOS 14.4+) and performance issues for external\ndisplays over some hardware such as DisplayLink. If you want to minimize\ninput latency, set this to false with the known aforementioned risks.\n\nChanging this value at runtime will only affect new terminals.\n\nThis setting is only supported currently on macOS.", "window-inherit-working-directory": "If true, new windows and tabs will inherit the working directory of the\npreviously focused window. If no window was previously focused, the default\nworking directory will be used (the `working-directory` option).", "window-inherit-font-size": "If true, new windows and tabs will inherit the font size of the previously\nfocused window. If no window was previously focused, the default font size\nwill be used. If this is false, the default font size specified in the\nconfiguration `font-size` will be used.", "window-decoration": "Valid values:\n\n  * `true`\n  * `false` - windows won't have native decorations, i.e. titlebar and\n     borders. On macOS this also disables tabs and tab overview.\n\nThe \"toggle_window_decorations\" keybind action can be used to create\na keybinding to toggle this setting at runtime.\n\nChanging this configuration in your configuration and reloading will\nonly affect new windows. Existing windows will not be affected.\n\nmacOS: To hide the titlebar without removing the native window borders\n       or rounded corners, use `macos-titlebar-style = hidden` instead.", "window-title-font-family": "The font that will be used for the application's window and tab titles.\n\nThis is currently only supported on macOS.", "window-theme": "The theme to use for the windows. Valid values:\n\n  * `auto` - Determine the theme based on the configured terminal\n     background color. This has no effect if the \"theme\" configuration\n     has separate light and dark themes. In that case, the behavior\n     of \"auto\" is equivalent to \"system\".\n  * `system` - Use the system theme.\n  * `light` - Use the light theme regardless of system theme.\n  * `dark` - Use the dark theme regardless of system theme.\n  * `ghostty` - Use the background and foreground colors specified in the\n    Ghostty configuration. This is only supported on Linux builds with\n    Adwaita and `gtk-adwaita` enabled.\n\nOn macOS, if `macos-titlebar-style` is \"tabs\", the window theme will be\nautomatically set based on the luminosity of the terminal background color.\nThis only applies to terminal windows. This setting will still apply to\nnon-terminal windows within Ghostty.\n\nThis is currently only supported on macOS and Linux.", "window-colorspace": "The colorspace to use for the terminal window. The default is `srgb` but\nthis can also be set to `display-p3` to use the Display P3 colorspace.\n\nChanging this value at runtime will only affect new windows.\n\nThis setting is only supported on macOS.", "window-height": "The initial window size. This size is in terminal grid cells by default.\nBoth values must be set to take effect. If only one value is set, it is\nignored.\n\nWe don't currently support specifying a size in pixels but a future change\ncan enable that. If this isn't specified, the app runtime will determine\nsome default size.\n\nNote that the window manager may put limits on the size or override the\nsize. For example, a tiling window manager may force the window to be a\ncertain size to fit within the grid. There is nothing Ghostty will do about\nthis, but it will make an effort.\n\nSizes larger than the screen size will be clamped to the screen size.\nThis can be used to create a maximized-by-default window size.\n\nThis will not affect new tabs, splits, or other nested terminal elements.\nThis only affects the initial window size of any new window. Changing this\nvalue will not affect the size of the window after it has been created. This\nis only used for the initial size.\n\nBUG: On Linux with GTK, the calculated window size will not properly take\ninto account window decorations. As a result, the grid dimensions will not\nexactly match this configuration. If window decorations are disabled (see\n`window-decoration`), then this will work as expected.\n\nWindows smaller than 10 wide by 4 high are not allowed.", "window-width": "The initial window size. This size is in terminal grid cells by default.\nBoth values must be set to take effect. If only one value is set, it is\nignored.\n\nWe don't currently support specifying a size in pixels but a future change\ncan enable that. If this isn't specified, the app runtime will determine\nsome default size.\n\nNote that the window manager may put limits on the size or override the\nsize. For example, a tiling window manager may force the window to be a\ncertain size to fit within the grid. There is nothing Ghostty will do about\nthis, but it will make an effort.\n\nSizes larger than the screen size will be clamped to the screen size.\nThis can be used to create a maximized-by-default window size.\n\nThis will not affect new tabs, splits, or other nested terminal elements.\nThis only affects the initial window size of any new window. Changing this\nvalue will not affect the size of the window after it has been created. This\nis only used for the initial size.\n\nBUG: On Linux with GTK, the calculated window size will not properly take\ninto account window decorations. As a result, the grid dimensions will not\nexactly match this configuration. If window decorations are disabled (see\n`window-decoration`), then this will work as expected.\n\nWindows smaller than 10 wide by 4 high are not allowed.", "window-save-state": "Whether to enable saving and restoring window state. Window state includes\ntheir position, size, tabs, splits, etc. Some window state requires shell\nintegration, such as preserving working directories. See `shell-integration`\nfor more information.\n\nThere are three valid values for this configuration:\n\n  * `default` will use the default system behavior. On macOS, this\n    will only save state if the application is forcibly terminated\n    or if it is configured systemwide via Settings.app.\n\n  * `never` will never save window state.\n\n  * `always` will always save window state whenever Ghostty is exited.\n\nIf you change this value to `never` while Ghostty is not running, the next\nGhostty launch will NOT restore the window state.\n\nIf you change this value to `default` while Ghostty is not running and the\nprevious exit saved state, the next Ghostty launch will still restore the\nwindow state. This is because Ghostty cannot know if the previous exit was\ndue to a forced save or not (macOS doesn't provide this information).\n\nIf you change this value so that window state is saved while Ghostty is not\nrunning, the previous window state will not be restored because Ghostty only\nsaves state on exit if this is enabled.\n\nThe default value is `default`.\n\nThis is currently only supported on macOS. This has no effect on Linux.", "window-step-resize": "Resize the window in discrete increments of the focused surface's cell size.\nIf this is disabled, surfaces are resized in pixel increments. Currently\nonly supported on macOS.", "window-new-tab-position": "The position where new tabs are created. Valid values:\n\n  * `current` - Insert the new tab after the currently focused tab,\n    or at the end if there are no focused tabs.\n\n  * `end` - Insert the new tab at the end of the tab list.", "window-titlebar-background": "Background color for the window titlebar. This only takes effect if\nwindow-theme is set to ghostty. Currently only supported in the GTK app\nruntime.", "window-titlebar-foreground": "Foreground color for the window titlebar. This only takes effect if\nwindow-theme is set to ghostty. Currently only supported in the GTK app\nruntime.", "resize-overlay": "This controls when resize overlays are shown. Resize overlays are a\ntransient popup that shows the size of the terminal while the surfaces are\nbeing resized. The possible options are:\n\n  * `always` - Always show resize overlays.\n  * `never` - Never show resize overlays.\n  * `after-first` - The resize overlay will not appear when the surface\n                    is first created, but will show up if the surface is\n                    subsequently resized.\n\nThe default is `after-first`.", "resize-overlay-position": "If resize overlays are enabled, this controls the position of the overlay.\nThe possible options are:\n\n  * `center`\n  * `top-left`\n  * `top-center`\n  * `top-right`\n  * `bottom-left`\n  * `bottom-center`\n  * `bottom-right`\n\nThe default is `center`.", "resize-overlay-duration": "If resize overlays are enabled, this controls how long the overlay is\nvisible on the screen before it is hidden. The default is \u00be of a second or\n750 ms.\n\nThe duration is specified as a series of numbers followed by time units.\nWhitespace is allowed between numbers and units. Each number and unit will\nbe added together to form the total duration.\n\nThe allowed time units are as follows:\n\n  * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments\n    are made for leap years or leap seconds.\n  * `d` - one SI day, or 86400 seconds.\n  * `h` - one hour, or 3600 seconds.\n  * `m` - one minute, or 60 seconds.\n  * `s` - one second.\n  * `ms` - one millisecond, or 0.001 second.\n  * `us` or `\u00b5s` - one microsecond, or 0.000001 second.\n  * `ns` - one nanosecond, or 0.000000001 second.\n\nExamples:\n  * `1h30m`\n  * `45s`\n\nUnits can be repeated and will be added together. This means that\n`1h1h` is equivalent to `2h`. This is confusing and should be avoided.\nA future update may disallow this.\n\nThe maximum value is `584y 49w 23h 34m 33s 709ms 551\u00b5s 615ns`. Any\nvalue larger than this will be clamped to the maximum value.", "focus-follows-mouse": "If true, when there are multiple split panes, the mouse selects the pane\nthat is focused. This only applies to the currently focused window; i.e.\nmousing over a split in an unfocused window will not focus that split\nand bring the window to front.\n\nDefault is false.", "clipboard-read": "Whether to allow programs running in the terminal to read/write to the\nsystem clipboard (OSC 52, for googling). The default is to allow clipboard\nreading after prompting the user and allow writing unconditionally.\n\nValid values are:\n\n  * `ask`\n  * `allow`\n  * `deny`", "clipboard-write": "Whether to allow programs running in the terminal to read/write to the\nsystem clipboard (OSC 52, for googling). The default is to allow clipboard\nreading after prompting the user and allow writing unconditionally.\n\nValid values are:\n\n  * `ask`\n  * `allow`\n  * `deny`", "clipboard-trim-trailing-spaces": "Trims trailing whitespace on data that is copied to the clipboard. This does\nnot affect data sent to the clipboard via `clipboard-write`.", "clipboard-paste-protection": "Require confirmation before pasting text that appears unsafe. This helps\nprevent a \"copy/paste attack\" where a user may accidentally execute unsafe\ncommands by pasting text with newlines.", "clipboard-paste-bracketed-safe": "If true, bracketed pastes will be considered safe. By default, bracketed\npastes are considered safe. \"Bracketed\" pastes are pastes while the running\nprogram has bracketed paste mode enabled (a setting set by the running\nprogram, not the terminal emulator).", "title-report": "Enables or disabled title reporting (CSI 21 t). This escape sequence\nallows the running program to query the terminal title. This is a common\nsecurity issue and is disabled by default.\n\n<Warning>\n This can expose sensitive information at best and enable\narbitrary code execution at worst (with a maliciously crafted title\nand a minor amount of user interaction).\n</Warning>", "image-storage-limit": "The total amount of bytes that can be used for image data (i.e. the Kitty\nimage protocol) per terminal screen. The maximum value is 4,294,967,295\n(4GiB). The default is 320MB. If this is set to zero, then all image\nprotocols will be disabled.\n\nThis value is separate for primary and alternate screens so the effective\nlimit per surface is double.", "copy-on-select": "Whether to automatically copy selected text to the clipboard. `true`\nwill prefer to copy to the selection clipboard if supported by the\nOS, otherwise it will copy to the system clipboard.\n\nThe value `clipboard` will always copy text to the selection clipboard\n(for supported systems) as well as the system clipboard. This is sometimes\na preferred behavior on Linux.\n\nMiddle-click paste will always use the selection clipboard on Linux\nand the system clipboard on macOS. Middle-click paste is always enabled\neven if this is `false`.\n\nThe default value is true on Linux and false on macOS. macOS copy on\nselect behavior is not typical for applications so it is disabled by\ndefault. On Linux, this is a standard behavior so it is enabled by\ndefault.", "click-repeat-interval": "The time in milliseconds between clicks to consider a click a repeat\n(double, triple, etc.) or an entirely new single click. A value of zero will\nuse a platform-specific default. The default on macOS is determined by the\nOS settings. On every other platform it is 500ms.", "config-file": "Additional configuration files to read. This configuration can be repeated\nto read multiple configuration files. Configuration files themselves can\nload more configuration files. Paths are relative to the file containing the\n`config-file` directive. For command-line arguments, paths are relative to\nthe current working directory.\n\nPrepend a ? character to the file path to suppress errors if the file does\nnot exist. If you want to include a file that begins with a literal ?\ncharacter, surround the file path in double quotes (\").\n\nCycles are not allowed. If a cycle is detected, an error will be logged and\nthe configuration file will be ignored.\n\nConfiguration files are loaded after the configuration they're defined\nwithin in the order they're defined. **THIS IS A VERY SUBTLE BUT IMPORTANT\nPOINT.** To put it another way: configuration files do not take effect\nuntil after the entire configuration is loaded. For example, in the\nconfiguration below:\n\n```\nconfig-file = \"foo\"\na = 1\n```\n\nIf \"foo\" contains `a = 2`, the final value of `a` will be 2, because\n`foo` is loaded after the configuration file that configures the\nnested `config-file` value.", "config-default-files": "When this is true, the default configuration file paths will be loaded.\nThe default configuration file paths are currently only the XDG\nconfig path ($XDG_CONFIG_HOME/ghostty/config).\n\nIf this is false, the default configuration paths will not be loaded.\nThis is targeted directly at using Ghostty from the CLI in a way\nthat minimizes external effects.\n\nThis is a CLI-only configuration. Setting this in a configuration file\nwill have no effect. It is not an error, but it will not do anything.\nThis configuration can only be set via CLI arguments.", "confirm-close-surface": "Confirms that a surface should be closed before closing it.\n\nThis defaults to `true`. If set to `false`, surfaces will close without\nany confirmation. This can also be set to `always`, which will always\nconfirm closing a surface, even if shell integration says a process isn't\nrunning.", "quit-after-last-window-closed": "Whether or not to quit after the last surface is closed.\n\nThis defaults to `false` on macOS since that is standard behavior for\na macOS application. On Linux, this defaults to `true` since that is\ngenerally expected behavior.\n\nOn Linux, if this is `true`, Ghostty can delay quitting fully until a\nconfigurable amount of time has passed after the last window is closed.\nSee the documentation of `quit-after-last-window-closed-delay`.", "quit-after-last-window-closed-delay": "Controls how long Ghostty will stay running after the last open surface has\nbeen closed. This only has an effect if `quit-after-last-window-closed` is\nalso set to `true`.\n\nThe minimum value for this configuration is `1s`. Any values lower than\nthis will be clamped to `1s`.\n\nThe duration is specified as a series of numbers followed by time units.\nWhitespace is allowed between numbers and units. Each number and unit will\nbe added together to form the total duration.\n\nThe allowed time units are as follows:\n\n  * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments\n    are made for leap years or leap seconds.\n  * `d` - one SI day, or 86400 seconds.\n  * `h` - one hour, or 3600 seconds.\n  * `m` - one minute, or 60 seconds.\n  * `s` - one second.\n  * `ms` - one millisecond, or 0.001 second.\n  * `us` or `\u00b5s` - one microsecond, or 0.000001 second.\n  * `ns` - one nanosecond, or 0.000000001 second.\n\nExamples:\n  * `1h30m`\n  * `45s`\n\nUnits can be repeated and will be added together. This means that\n`1h1h` is equivalent to `2h`. This is confusing and should be avoided.\nA future update may disallow this.\n\nThe maximum value is `584y 49w 23h 34m 33s 709ms 551\u00b5s 615ns`. Any\nvalue larger than this will be clamped to the maximum value.\n\nBy default `quit-after-last-window-closed-delay` is unset and\nGhostty will quit immediately after the last window is closed if\n`quit-after-last-window-closed` is `true`.\n\nOnly implemented on Linux.", "initial-window": "This controls whether an initial window is created when Ghostty\nis run. Note that if `quit-after-last-window-closed` is `true` and\n`quit-after-last-window-closed-delay` is set, setting `initial-window` to\n`false` will mean that Ghostty will quit after the configured delay if no\nwindow is ever created. Only implemented on Linux and macOS.", "quick-terminal-position": "The position of the \"quick\" terminal window. To learn more about the\nquick terminal, see the documentation for the `toggle_quick_terminal`\nbinding action.\n\nValid values are:\n\n  * `top` - Terminal appears at the top of the screen.\n  * `bottom` - Terminal appears at the bottom of the screen.\n  * `left` - Terminal appears at the left of the screen.\n  * `right` - Terminal appears at the right of the screen.\n  * `center` - Terminal appears at the center of the screen.\n\nChanging this configuration requires restarting Ghostty completely.\n\n<Note>\n There is no default keybind for toggling the quick terminal.\nTo enable this feature, bind the `toggle_quick_terminal` action to a key.\n</Note>", "quick-terminal-screen": "The screen where the quick terminal should show up.\n\nValid values are:\n\n * `main` - The screen that the operating system recommends as the main\n   screen. On macOS, this is the screen that is currently receiving\n   keyboard input. This screen is defined by the operating system and\n   not chosen by Ghostty.\n\n * `mouse` - The screen that the mouse is currently hovered over.\n\n * `macos-menu-bar` - The screen that contains the macOS menu bar as\n   set in the display settings on macOS. This is a bit confusing because\n   every screen on macOS has a menu bar, but this is the screen that\n   contains the primary menu bar.\n\nThe default value is `main` because this is the recommended screen\nby the operating system.", "quick-terminal-animation-duration": "Duration (in seconds) of the quick terminal enter and exit animation.\nSet it to 0 to disable animation completely. This can be changed at\nruntime.", "quick-terminal-autohide": "Automatically hide the quick terminal when focus shifts to another window.\nSet it to false for the quick terminal to remain open even when it loses focus.", "shell-integration": "Whether to enable shell integration auto-injection or not. Shell integration\ngreatly enhances the terminal experience by enabling a number of features:\n\n  * Working directory reporting so new tabs, splits inherit the\n    previous terminal's working directory.\n\n  * Prompt marking that enables the \"jump_to_prompt\" keybinding.\n\n  * If you're sitting at a prompt, closing a terminal will not ask\n    for confirmation.\n\n  * Resizing the window with a complex prompt usually paints much\n    better.\n\nAllowable values are:\n\n  * `none` - Do not do any automatic injection. You can still manually\n    configure your shell to enable the integration.\n\n  * `detect` - Detect the shell based on the filename.\n\n  * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.\n\nThe default value is `detect`.", "shell-integration-features": "Shell integration features to enable if shell integration itself is enabled.\nThe format of this is a list of features to enable separated by commas. If\nyou prefix a feature with `no-` then it is disabled. If you omit a feature,\nits default value is used, so you must explicitly disable features you don't\nwant. You can also use `true` or `false` to turn all features on or off.\n\nAvailable features:\n\n  * `cursor` - Set the cursor to a blinking bar at the prompt.\n\n  * `sudo` - Set sudo wrapper to preserve terminfo.\n\n  * `title` - Set the window title via shell integration.\n\nExample: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`", "osc-color-report-format": "Sets the reporting format for OSC sequences that request color information.\nGhostty currently supports OSC 10 (foreground), OSC 11 (background), and\nOSC 4 (256 color palette) queries, and by default the reported values\nare scaled-up RGB values, where each component are 16 bits. This is how\nmost terminals report these values. However, some legacy applications may\nrequire 8-bit, unscaled, components. We also support turning off reporting\naltogether. The components are lowercase hex values.\n\nAllowable values are:\n\n  * `none` - OSC 4/10/11 queries receive no reply\n\n  * `8-bit` - Color components are return unscaled, i.e. `rr/gg/bb`\n\n  * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`\n\nThe default value is `16-bit`.", "vt-kam-allowed": "If true, allows the \"KAM\" mode (ANSI mode 2) to be used within\nthe terminal. KAM disables keyboard input at the request of the\napplication. This is not a common feature and is not recommended\nto be enabled. This will not be documented further because\nif you know you need KAM, you know. If you don't know if you\nneed KAM, you don't need it.", "custom-shader": "Custom shaders to run after the default shaders. This is a file path\nto a GLSL-syntax shader for all platforms.\n\n<Warning>\n Invalid shaders can cause Ghostty to become unusable such as by\ncausing the window to be completely black. If this happens, you can\nunset this configuration to disable the shader.\n</Warning>\n\nOn Linux, this requires OpenGL 4.2. Ghostty typically only requires\nOpenGL 3.3, but custom shaders push that requirement up to 4.2.\n\nThe shader API is identical to the Shadertoy API: you specify a `mainImage`\nfunction and the available uniforms match Shadertoy. The iChannel0 uniform\nis a texture containing the rendered terminal screen.\n\nIf the shader fails to compile, the shader will be ignored. Any errors\nrelated to shader compilation will not show up as configuration errors\nand only show up in the log, since shader compilation happens after\nconfiguration loading on the dedicated render thread.  For interactive\ndevelopment, use [shadertoy.com](https://shadertoy.com).\n\nThis can be repeated multiple times to load multiple shaders. The shaders\nwill be run in the order they are specified.\n\nChanging this value at runtime and reloading the configuration will only\naffect new windows, tabs, and splits.", "custom-shader-animation": "If `true` (default), the focused terminal surface will run an animation\nloop when custom shaders are used. This uses slightly more CPU (generally\nless than 10%) but allows the shader to animate. This only runs if there\nare custom shaders and the terminal is focused.\n\nIf this is set to `false`, the terminal and custom shader will only render\nwhen the terminal is updated. This is more efficient but the shader will\nnot animate.\n\nThis can also be set to `always`, which will always run the animation\nloop regardless of whether the terminal is focused or not. The animation\nloop will still only run when custom shaders are used. Note that this\nwill use more CPU per terminal surface and can become quite expensive\ndepending on the shader and your terminal usage.\n\nThis value can be changed at runtime and will affect all currently\nopen terminals.", "macos-non-native-fullscreen": "If anything other than false, fullscreen mode on macOS will not use the\nnative fullscreen, but make the window fullscreen without animations and\nusing a new space. It's faster than the native fullscreen mode since it\ndoesn't use animations.\n\nImportant: tabs DO NOT WORK in this mode. Non-native fullscreen removes\nthe titlebar and macOS native tabs require the titlebar. If you use tabs,\nyou should not use this mode.\n\nIf you fullscreen a window with tabs, the currently focused tab will\nbecome fullscreen while the others will remain in a separate window in\nthe background. You can switch to that window using normal window-switching\nkeybindings such as command+tilde. When you exit fullscreen, the window\nwill return to the tabbed state it was in before.\n\nAllowable values are:\n\n  * `visible-menu` - Use non-native macOS fullscreen, keep the menu bar visible\n  * `true` - Use non-native macOS fullscreen, hide the menu bar\n  * `false` - Use native macOS fullscreen\n\nChanging this option at runtime works, but will only apply to the next\ntime the window is made fullscreen. If a window is already fullscreen,\nit will retain the previous setting until fullscreen is exited.", "macos-titlebar-style": "The style of the macOS titlebar. Available values are: \"native\",\n\"transparent\", \"tabs\", and \"hidden\".\n\nThe \"native\" style uses the native macOS titlebar with zero customization.\nThe titlebar will match your window theme (see `window-theme`).\n\nThe \"transparent\" style is the same as \"native\" but the titlebar will\nbe transparent and allow your window background color to come through.\nThis makes a more seamless window appearance but looks a little less\ntypical for a macOS application and may not work well with all themes.\n\nThe \"transparent\" style will also update in real-time to dynamic\nchanges to the window background color, i.e. via OSC 11. To make this\nmore aesthetically pleasing, this only happens if the terminal is\na window, tab, or split that borders the top of the window. This\navoids a disjointed appearance where the titlebar color changes\nbut all the topmost terminals don't match.\n\nThe \"tabs\" style is a completely custom titlebar that integrates the\ntab bar into the titlebar. This titlebar always matches the background\ncolor of the terminal. There are some limitations to this style:\nOn macOS 13 and below, saved window state will not restore tabs correctly.\nmacOS 14 does not have this issue and any other macOS version has not\nbeen tested.\n\nThe \"hidden\" style hides the titlebar. Unlike `window-decoration = false`,\nhowever, it does not remove the frame from the window or cause it to have\nsquared corners. Changing to or from this option at run-time may affect\nexisting windows in buggy ways. The top titlebar area of the window will\ncontinue to drag the window around and you will not be able to use\nthe mouse for terminal events in this space.\n\nThe default value is \"transparent\". This is an opinionated choice\nbut its one I think is the most aesthetically pleasing and works in\nmost cases.\n\nChanging this option at runtime only applies to new windows.", "macos-titlebar-proxy-icon": "Whether the proxy icon in the macOS titlebar is visible. The proxy icon\nis the icon that represents the folder of the current working directory.\nYou can see this very clearly in the macOS built-in Terminal.app\ntitlebar.\n\nThe proxy icon is only visible with the native macOS titlebar style.\n\nValid values are:\n\n  * `visible` - Show the proxy icon.\n  * `hidden` - Hide the proxy icon.\n\nThe default value is `visible`.\n\nThis setting can be changed at runtime and will affect all currently\nopen windows but only after their working directory changes again.\nTherefore, to make this work after changing the setting, you must\nusually `cd` to a different directory, open a different file in an\neditor, etc.", "macos-option-as-alt": "macOS doesn't have a distinct \"alt\" key and instead has the \"option\"\nkey which behaves slightly differently. On macOS by default, the\noption key plus a character will sometimes produces a Unicode character.\nFor example, on US standard layouts option-b produces \"\u222b\". This may be\nundesirable if you want to use \"option\" as an \"alt\" key for keybindings\nin terminal programs or shells.\n\nThis configuration lets you change the behavior so that option is treated\nas alt.\n\nThe default behavior (unset) will depend on your active keyboard\nlayout. If your keyboard layout is one of the keyboard layouts listed\nbelow, then the default value is \"true\". Otherwise, the default\nvalue is \"false\". Keyboard layouts with a default value of \"true\" are:\n\n  - U.S. Standard\n  - U.S. International\n\nNote that if an *Option*-sequence doesn't produce a printable character, it\nwill be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).\n\nExplicit values that can be set:\n\nIf `true`, the *Option* key will be treated as *Alt*. This makes terminal\nsequences expecting *Alt* to work properly, but will break Unicode input\nsequences on macOS if you use them via the *Alt* key.\n\nYou may set this to `false` to restore the macOS *Alt* key unicode\nsequences but this will break terminal sequences expecting *Alt* to work.\n\nThe values `left` or `right` enable this for the left or right *Option*\nkey, respectively.\n\nThis does not work with GLFW builds.", "macos-window-shadow": "Whether to enable the macOS window shadow. The default value is true.\nWith some window managers and window transparency settings, you may\nfind false more visually appealing.", "macos-auto-secure-input": "If true, Ghostty on macOS will automatically enable the \"Secure Input\"\nfeature when it detects that a password prompt is being displayed.\n\n\"Secure Input\" is a macOS security feature that prevents applications from\nreading keyboard events. This can always be enabled manually using the\n`Ghostty > Secure Keyboard Entry` menu item.\n\nNote that automatic password prompt detection is based on heuristics\nand may not always work as expected. Specifically, it does not work\nover SSH connections, but there may be other cases where it also\ndoesn't work.\n\nA reason to disable this feature is if you find that it is interfering\nwith legitimate accessibility software (or software that uses the\naccessibility APIs), since secure input prevents any application from\nreading keyboard events.", "macos-secure-input-indication": "If true, Ghostty will show a graphical indication when secure input is\nenabled. This indication is generally recommended to know when secure input\nis enabled.\n\nNormally, secure input is only active when a password prompt is displayed\nor it is manually (and typically temporarily) enabled. However, if you\nalways have secure input enabled, the indication can be distracting and\nyou may want to disable it.", "macos-icon": "Customize the macOS app icon.\n\nThis only affects the icon that appears in the dock, application\nswitcher, etc. This does not affect the icon in Finder because\nthat is controlled by a hardcoded value in the signed application\nbundle and can't be changed at runtime. For more details on what\nexactly is affected, see the `NSApplication.icon` Apple documentation;\nthat is the API that is being used to set the icon.\n\nValid values:\n\n * `official` - Use the official Ghostty icon.\n * `custom-style` - Use the official Ghostty icon but with custom\n   styles applied to various layers. The custom styles must be\n   specified using the additional `macos-icon`-prefixed configurations.\n   The `macos-icon-ghost-color` and `macos-icon-screen-color`\n   configurations are required for this style.\n\n<Warning>\n The `custom-style` option is _experimental_. We may change\nthe format of the custom styles in the future. We're still finalizing\nthe exact layers and customization options that will be available.\n</Warning>\n\nOther caveats:\n\n  * The icon in the update dialog will always be the official icon.\n    This is because the update dialog is managed through a\n    separate framework and cannot be customized without significant\n    effort.", "macos-icon-frame": "The material to use for the frame of the macOS app icon.\n\nValid values:\n\n * `aluminum` - A brushed aluminum frame. This is the default.\n * `beige` - A classic 90's computer beige frame.\n * `plastic` - A glossy, dark plastic frame.\n * `chrome` - A shiny chrome frame.\n\nThis only has an effect when `macos-icon` is set to `custom-style`.", "macos-icon-ghost-color": "The color of the ghost in the macOS app icon.\n\nThe format of the color is the same as the `background` configuration;\nsee that for more information.\n\n<Note>\n This configuration is required when `macos-icon` is set to\n`custom-style`.\n</Note>\n\nThis only has an effect when `macos-icon` is set to `custom-style`.", "macos-icon-screen-color": "The color of the screen in the macOS app icon.\n\nThe screen is a gradient so you can specify multiple colors that\nmake up the gradient. Colors should be separated by commas. The\nformat of the color is the same as the `background` configuration;\nsee that for more information.\n\n<Note>\n This configuration is required when `macos-icon` is set to\n`custom-style`.\n</Note>\n\nThis only has an effect when `macos-icon` is set to `custom-style`.", "linux-cgroup": "Put every surface (tab, split, window) into a dedicated Linux cgroup.\n\nThis makes it so that resource management can be done on a per-surface\ngranularity. For example, if a shell program is using too much memory,\nonly that shell will be killed by the oom monitor instead of the entire\nGhostty process. Similarly, if a shell program is using too much CPU,\nonly that surface will be CPU-throttled.\n\nThis will cause startup times to be slower (a hundred milliseconds or so),\nso the default value is \"single-instance.\" In single-instance mode, only\none instance of Ghostty is running (see gtk-single-instance) so the startup\ntime is a one-time cost. Additionally, single instance Ghostty is much\nmore likely to have many windows, tabs, etc. so cgroup isolation is a\nbig benefit.\n\nThis feature requires systemd. If systemd is unavailable, cgroup\ninitialization will fail. By default, this will not prevent Ghostty\nfrom working (see linux-cgroup-hard-fail).\n\nValid values are:\n\n  * `never` - Never use cgroups.\n  * `always` - Always use cgroups.\n  * `single-instance` - Enable cgroups only for Ghostty instances launched\n    as single-instance applications (see gtk-single-instance).", "linux-cgroup-memory-limit": "Memory limit for any individual terminal process (tab, split, window,\netc.) in bytes. If this is unset then no memory limit will be set.\n\nNote that this sets the \"memory.high\" configuration for the memory\ncontroller, which is a soft limit. You should configure something like\nsystemd-oom to handle killing processes that have too much memory\npressure.", "linux-cgroup-processes-limit": "Number of processes limit for any individual terminal process (tab, split,\nwindow, etc.). If this is unset then no limit will be set.\n\nNote that this sets the \"pids.max\" configuration for the process number\ncontroller, which is a hard limit.", "linux-cgroup-hard-fail": "If this is false, then any cgroup initialization (for linux-cgroup)\nwill be allowed to fail and the failure is ignored. This is useful if\nyou view cgroup isolation as a \"nice to have\" and not a critical resource\nmanagement feature, because Ghostty startup will not fail if cgroup APIs\nfail.\n\nIf this is true, then any cgroup initialization failure will cause\nGhostty to exit or new surfaces to not be created.\n\n<Note>\n This currently only affects cgroup initialization. Subprocesses\nmust always be able to move themselves into an isolated cgroup.\n</Note>", "gtk-single-instance": "If `true`, the Ghostty GTK application will run in single-instance mode:\neach new `ghostty` process launched will result in a new window if there is\nalready a running process.\n\nIf `false`, each new ghostty process will launch a separate application.\n\nThe default value is `desktop` which will default to `true` if Ghostty\ndetects that it was launched from the `.desktop` file such as an app\nlauncher (like Gnome Shell)  or by D-Bus activation. If Ghostty is launched\nfrom the command line, it will default to `false`.\n\nNote that debug builds of Ghostty have a separate single-instance ID\nso you can test single instance without conflicting with release builds.", "gtk-titlebar": "When enabled, the full GTK titlebar is displayed instead of your window\nmanager's simple titlebar. The behavior of this option will vary with your\nwindow manager.\n\nThis option does nothing when `window-decoration` is false or when running\nunder macOS.\n\nChanging this value at runtime and reloading the configuration will only\naffect new windows.", "gtk-tabs-location": "Determines the side of the screen that the GTK tab bar will stick to.\nTop, bottom, left, right, and hidden are supported. The default is top.\n\nIf this option has value `left` or `right` when using Adwaita, it falls\nback to `top`. `hidden`, meaning that tabs don't exist, is not supported\nwithout using Adwaita, falling back to `top`.\n\nWhen `hidden` is set and Adwaita is enabled, a tab button displaying the\nnumber of tabs will appear in the title bar. It has the ability to open a\ntab overview for displaying tabs. Alternatively, you can use the\n`toggle_tab_overview` action in a keybind if your window doesn't have a\ntitle bar, or you can switch tabs with keybinds.", "adw-toolbar-style": "Determines the appearance of the top and bottom bars when using the\nAdwaita tab bar. This requires `gtk-adwaita` to be enabled (it is\nby default).\n\nValid values are:\n\n * `flat` - Top and bottom bars are flat with the terminal window.\n * `raised` - Top and bottom bars cast a shadow on the terminal area.\n * `raised-border` - Similar to `raised` but the shadow is replaced with a\n   more subtle border.\n\nChanging this value at runtime will only affect new windows.", "gtk-wide-tabs": "If `true` (default), then the Ghostty GTK tabs will be \"wide.\" Wide tabs\nare the new typical Gnome style where tabs fill their available space.\nIf you set this to `false` then tabs will only take up space they need,\nwhich is the old style.", "gtk-adwaita": "If `true` (default), Ghostty will enable Adwaita theme support. This\nwill make `window-theme` work properly and will also allow Ghostty to\nproperly respond to system theme changes, light/dark mode changing, etc.\nThis requires a GTK4 desktop with a GTK4 theme.\n\nIf you are running GTK3 or have a GTK3 theme, you may have to set this\nto false to get your theme picked up properly. Having this set to true\nwith GTK3 should not cause any problems, but it may not work exactly as\nexpected.\n\nThis configuration only has an effect if Ghostty was built with\nAdwaita support.", "desktop-notifications": "If `true` (default), applications running in the terminal can show desktop\nnotifications using certain escape sequences such as OSC 9 or OSC 777.", "bold-is-bright": "If `true`, the bold text will use the bright color palette.", "term": "This will be used to set the `TERM` environment variable.\nHACK: We set this with an `xterm` prefix because vim uses that to enable key\nprotocols (specifically this will enable `modifyOtherKeys`), among other\nfeatures. An option exists in vim to modify this: `:set\nkeyprotocol=ghostty:kitty`, however a bug in the implementation prevents it\nfrom working properly. https://github.com/vim/vim/pull/13211 fixes this.", "enquiry-response": "String to send when we receive `ENQ` (`0x05`) from the command that we are\nrunning. Defaults to an empty string if not set.", "auto-update": "Control the auto-update functionality of Ghostty. This is only supported\non macOS currently, since Linux builds are distributed via package\nmanagers that are not centrally controlled by Ghostty.\n\nChecking or downloading an update does not send any information to\nthe project beyond standard network information mandated by the\nunderlying protocols. To put it another way: Ghostty doesn't explicitly\nadd any tracking to the update process. The update process works by\ndownloading information about the latest version and comparing it\nclient-side to the current version.\n\nValid values are:\n\n * `off` - Disable auto-updates.\n * `check` - Check for updates and notify the user if an update is\n   available, but do not automatically download or install the update.\n * `download` - Check for updates, automatically download the update,\n   notify the user, but do not automatically install the update.\n\nChanging this value at runtime works after a small delay.", "auto-update-channel": ""}
;